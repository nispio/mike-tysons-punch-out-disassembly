#!/bin/bash
set -euo pipefail

# If the md5sum command is available, use it
if md5cmd=$(which md5sum 2>/dev/null); then
    exec ${md5cmd} "$@"
fi

# Function to calculate MD5 hash for a file
calculate_md5() {
    md5 -q "$1"
}

# Function to check MD5 checksums against a file
check_md5_checksums() {
    local checksum_file="$1"
    local file
    local expected_hash
    local actual_hash

    # Check if the checksum file exists
    if [ ! -f "$checksum_file" ]; then
        echo "$(basename "$0"): '$checksum_file' does not exist"
        exit 1
    fi

    # Read each line from the checksum file
    while IFS=' ' read -r expected_hash file || [ -n "$expected_hash" ]; do
        # Calculate the MD5 hash for the current file
        actual_hash=$(calculate_md5 "$file")

        # Compare the expected and actual hashes
        if [ "$actual_hash" = "$expected_hash" ]; then
            echo "$file: OK"
        else
            echo "$file: FAILED"
        fi
    done < "$checksum_file"
}

# Main function
main() {
    # Check if at least one argument is provided
    if [ $# -eq 0 ]; then
        echo "Usage: $(basename "$0") [-c CHECKSUM_FILE] FILE [FILE...]"
        exit 1
    fi

    # Parse arguments
    local checksum_file
    local files=()
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -c)
                shift
                checksum_file="$1"
                shift
                ;;
            *)
                files+=("$1")
                shift
                ;;
        esac
    done

    # Check if the -c argument is provided
    if [ -n "$checksum_file" ]; then
        check_md5_checksums "$checksum_file"
    else
        # Calculate MD5 hashes for each file
        for file in "${files[@]}"; do
            echo "$(calculate_md5 "$file") $file"
        done
    fi
}

# Execute the main function
main "$@"

