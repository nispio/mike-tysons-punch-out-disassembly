#!/bin/bash

# Instructions that operate on data

# ADC 	Add Memory to Accumulator with Carry
# SBC 	Subtract Memory from Accumulator with Borrow
# INC 	Increment Memory by One
# DEC 	Decrement Memory by One
# CMP 	Compare Memory and Accumulator
# BIT 	Test Bits in Memory with Accumulator
# AND 	"AND" Memory with Accumulator
# ORA 	"OR" Memory with Accumulator
# EOR 	"Exclusive-Or" Memory with Accumulator
# ASL 	Shift Left One Bit (Memory or Accumulator)
# LSR 	Shift Right One Bit (Memory or Accumulator)
# ROL 	Rotate One Bit Left (Memory or Accumulator)
# ROR 	Rotate One Bit Right (Memory or Accumulator)
# CPX 	Compare Memory and Index X
# CPY 	Compare Memory and Index Y
# LDA 	Load Accumulator with Memory
# LDX 	Load Index X with Memory
# LDY 	Load Index Y with Memory
# STA 	Store Accumulator in Memory
# STX 	Store Index X in Memory
# STY 	Store Index Y in Memory

memop='((LD|ST)[AXY]|CP[XY]|ADC|SBC|INC|DEC|CMP|BIT|AND|ORA|EOR|ASL|LSR|RO[LR])'


# Instructions with executable operands

# BCC 	Branch on Carry Clear
# BCS 	Branch on Carry Set
# BEQ 	Branch on Result Zero
# BMI 	Branch on Result Minus
# BNE 	Branch on Result not Zero
# BPL 	Branch on Result Plus
# BVC 	Branch on Overflow Clear
# BVS 	Branch on Overflow Set
# JMP 	Jump to New Location
# JSR 	Jump to New Location Saving Return Address

jmpop='(JMP|JSR|B[CV][SC]|BEQ|BNE|BMI|BPL)'


# Instructions with no operand

# BRK 	Force Break
# CLC 	Clear Carry Flag
# CLD 	Clear Decimal Mode
# CLI 	Clear interrupt Disable Bit
# CLV 	Clear Overflow Flag
# DEX 	Decrement Index X by One
# DEY 	Decrement Index Y by One
# INX 	Increment Index X by One
# INY 	Increment Index Y by One
# NOP 	No Operation
# PHA 	Push Accumulator on Stack
# PHP 	Push Processor Status on Stack
# PLA 	Pull Accumulator from Stack
# PLP 	Pull Processor Status from Stack
# RTI 	Return from Interrupt
# RTS 	Return from Subroutine
# SEC 	Set Carry Flag
# SED 	Set Decimal Mode
# SEI 	Set Interrupt Disable Status
# TAX 	Transfer Accumulator to Index X
# TAY 	Transfer Accumulator to Index Y
# TSX 	Transfer Stack Pointer to Index X
# TXA 	Transfer Index X to Accumulator
# TXS 	Transfer Index X to Stack Pointer
# TYA 	Transfer Index Y to Accumulator

nopop='(NOP|BRK|CL[CDIV]|SE[CDI]|(DE|IN|TA)[XY]|TX[AS]|TYA|P[HL][AP]|RT[IS])'

mem_and_ind_jmp="(${memop}[[:space:]]+\(?|${jmpop}[[:space:]]+\()[\$]"

jmp_only="${jmpop}[[:space:]]+\(?[\$]"

tail='(((,[XY]|\)|[[:space:]]+;).*)?)$'

# If the -j option given, then do jump/branch instructions only
if [[ $1 == '-j' ]]; then
    shift
    seek="${jmp_only}$1${tail}"
else
    seek="${mem_and_ind_jmp}$1${tail}"
fi

pattern="(\(?)[\$]$1${tail}"
replacement="\1$2\2          ;(\$$1)"

# If no second argument was given, then search only and exit
if [[ -z $2 ]]; then
    ag "${seek}" *.asm
    exit 1
fi

# In-place modification of source files
sed -i '.bak' -E "/${seek}/s/${pattern}/${replacement}/" *.asm

# Verify the results
ag "$2" *.asm
ag "${seek}" *.asm
